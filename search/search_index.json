{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my personal blog, where I share my journey and insights into the world of programming. Here, you'll find posts about <code>Python</code>, <code>Dart</code>, <code>Flutter</code>, <code>Swift</code>, <code>SwiftUI</code>, <code>Linux</code>, and everything that fuels my passion for code. Whether you're here to learn, explore, or connect, I hope you find inspiration in these pages.</p> <ul> <li> Swift</li> <li> SwiftUI</li> <li> Linux</li> <li> Apps</li> </ul>"},{"location":"apps/","title":"Apps","text":"<p>In this section, we explore the apps I use frequently, diving into their installation, configuration, and usage. You'll also find helpful guides, tips, and even alternatives to these tools.</p> <ul> <li> Xcode How to Customize File Headers</li> </ul>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/","title":"Xcode How to Customize File Headers","text":"<p>When we create a new file in Xcode, it automatically adds a comment at the top of the file with some information about the file, such as the file name, author, and creation date and so on. Sometimes we need to add some custom information like the version of the project, links to the repository or any other information that we want to keep in the file. In this guide we will learn step by step how to customize the headers using a custom <code>.plist</code> file.</p>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#create-a-plist-file","title":"Create a <code>.plist</code> file","text":"<p>First, we need to create an empty file named <code>IDETemplateMacros.plist</code> with any text editor, in this case we will use <code>neovim</code>.</p> <pre><code>nvim IDETemplateMacros.plist\n</code></pre> <p>Next, add the following content to the file.</p> IDETemplateMacros.plist<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n&lt;key&gt;FILEHEADER&lt;/key&gt;\n&lt;string&gt;\n//  ___FILENAME___\n//  ___PACKAGENAME___\n//\n//  Created by @ivansaul on ___DATE___.\n//\n//  https://github.com/ivansaul\n//&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>After adding the content, you should see something like this:</p> <p></p> <p>Note</p> <p><code>FILEHEADER</code>, <code>PACKAGENAME</code>, and <code>DATE</code> are text macros that will be replaced with the actual values when the file is created. We can find the list of all available text macros here: Text macros reference.</p>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#add-the-plist-file-to-xcode","title":"Add the <code>.plist</code> file to Xcode","text":"<p>Now we need to put the <code>.plist</code> file in the right place, where Xcode will be able to find it. Xcode will look for the <code>.plist</code> file in the following locations:</p>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#globally-for-xcode","title":"Globally for Xcode","text":"<pre><code>~/Library/Developer/Xcode/UserData/\n</code></pre>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#project-single-user","title":"Project (single user)","text":"<pre><code>&lt;project-name&gt;.xcodeproj/xcuserdata/&lt;username&gt;.xcuserdatad/\n</code></pre>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#project-all-users","title":"Project (all users)","text":"<pre><code>&lt;project-name&gt;.xcodeproj/xcshareddata/\n</code></pre>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#workspace-single-user","title":"Workspace (single user)","text":"<pre><code>&lt;workspace-name&gt;.xcworkspace/xcuserdata/&lt;username&gt;.xcuserdatad/\n</code></pre>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#workspace-all-users","title":"Workspace (all users)","text":"<pre><code>&lt;workspace-name&gt;.xcworkspace/xcshareddata/\n</code></pre> <p>Example</p> <p>If you really want to use in all your projects, you could copy the <code>.plist</code> file to the following location: <pre><code>cp IDETemplateMacros.plist ~/Library/Developer/Xcode/UserData/IDETemplateMacros.plist\n</code></pre></p>"},{"location":"apps/xcode/xcode-how-to-customize-file-headers/#use-multiple-plist-files","title":"Use multiple <code>.plist</code> files","text":"<p>We can use multiple <code>IDETemplateMacros.plist</code> files simultaneously, for example, we can have a global one in the following location:</p> <pre><code>~/Library/Developer/Xcode/UserData/IDETemplateMacros.plist\n</code></pre> <p>And a project specific one in the following location:</p> <pre><code>&lt;project-name&gt;.xcodeproj/xcuserdata/&lt;username&gt;.xcuserdatad/IDETemplateMacros.plist\n</code></pre> <p>Note</p> <p>The project specific one will override the global one.</p> <p>That's it, now we can create new files in Xcode and the headers will be customized, like this:</p> <p></p>"},{"location":"linux/","title":"Linux","text":"<p>GNU/Linux is a powerful and versatile open-source operating system that serves as the backbone for servers, desktops, and embedded systems worldwide. It is known for its flexibility, extensive community support, and the ability to customize nearly every aspect of the system.</p> <p>In this section, we cover a variety of topics, from installation guides to troubleshooting common issues and configuring popular distributions like Arch Linux, Ubuntu, and Debian.</p> <ul> <li> Opening Ports on Oracle Cloud Instances</li> </ul>"},{"location":"linux/guides/opening-ports-on-oracle-cloud-instances/","title":"Opening Ports on Oracle Cloud Instances","text":"<p>Oracle Cloud Infrastructure (OCI) provides a range of services that allow you to build, run, and manage applications in the cloud. One of the key services is the Oracle Cloud Instance, a virtual machine you can use to run your applications.</p> <p>In this tutorial, we will learn how to open ports on an Oracle Cloud Instance. This is particularly useful when you want to allow incoming traffic on specific ports, such as port 80 for HTTP traffic.</p>"},{"location":"linux/guides/opening-ports-on-oracle-cloud-instances/#adding-ingress-rules","title":"Adding Ingress Rules","text":"<p>Follow these steps to add ingress rules to your Oracle Cloud Instance:</p> <ul> <li>Log in to the Oracle Cloud Console.</li> <li>Navigate to the Compute menu and select Instances.</li> <li>Select the instance where you want to open a port.</li> <li>Click on the Subnet link.</li> </ul> <p></p> <ul> <li>Go to the Security Lists option.</li> </ul> <p></p> <ul> <li>Click on the Ingress Rules tab.</li> </ul> <p></p> <ul> <li>Add a new rule.</li> </ul> <p></p>"},{"location":"linux/guides/opening-ports-on-oracle-cloud-instances/#modifying-iptables","title":"Modifying iptables","text":"<p>Next, SSH into the instance and modify the iptables to allow incoming traffic on the desired port.</p> <p>Info</p> <p>The following steps assume your instance is running on a Ubuntu Linux distribution.</p> <ol> <li> <p>SSH into the instance using the <code>ssh</code> command:</p> <pre><code>ssh -i &lt;path-to-private-key&gt; &lt;username&gt;@&lt;instance-ip&gt;\n</code></pre> </li> <li> <p>Modify the iptables rules file using a text editor like <code>nano</code> or <code>vim</code>:</p> <pre><code>sudo nano /etc/iptables/rules.v4\n</code></pre> </li> <li> <p>Add the following line to allow traffic on the desired port (e.g., port 80):</p> <pre><code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n</code></pre> </li> <li> <p>Save the changes and exit the editor.</p> </li> <li> <p>Apply the updated iptables rules:</p> <pre><code>sudo iptables-restore &lt; /etc/iptables/rules.v4\n</code></pre> </li> </ol> <p>That's it! Your instance should now accept incoming traffic on the specified port. You can test it by accessing the instance using the URL:</p> <pre><code>http://&lt;instance-ip&gt;:80\n</code></pre>"},{"location":"swift/","title":"Swift","text":"<p>Swift is a general-purpose programming language developed by Apple Inc. for iOS, macOS, watchOS, and tvOS. It is designed to be safe, fast, and expressive, with features such as optionals, error handling, generics, and closures.</p> <ul> <li> Extensions in Swift</li> </ul>"},{"location":"swift/continued-learning/extensions-in-swift/","title":"Extensions in Swift","text":"<p><code>Extensions</code> in Swift allow us to add new functionality to existing <code>Classes</code>, <code>Structures</code>, <code>Enumerations</code>, or <code>Protocol</code> types. This includes adding new methods, properties, initializers, and more. Extensions are particularly useful for organizing and modularizing our code without needing to modify the original type, especially when we don't have access to the original source code.</p>"},{"location":"swift/continued-learning/extensions-in-swift/#extension-syntax","title":"Extension syntax","text":"<p>To create an extension, we use the <code>extension</code> keyword followed by the name of the type we want to extend.</p> <pre><code>extension SomeType {\n    // New functionalities to be added\n}\n</code></pre> <p>Let's explore some practical examples to understand how extensions work in Swift.</p>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-custom-functionality-to-existing-types","title":"Adding custom functionality to existing types","text":""},{"location":"swift/continued-learning/extensions-in-swift/#adding-computed-properties","title":"Adding computed properties","text":"<p>Extensions allow us to add computed properties. For example, we can add a computed property that determines if an integer is even or odd.</p> <pre><code>extension Int {\n    var isEven: Bool {\n        self % 2 == 0\n    }\n}\n\nprint(4.isEven) // Outputs: true\nprint(7.isEven) // Outputs: false\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-methods","title":"Adding Methods","text":"<p>Suppose we have a <code>String</code> type and want to add a method that reverses the string. Instead of modifying the <code>String</code> type itself, we can create an extension that adds a new method.</p> <pre><code>extension String {\n    func reverse() -&gt; String {\n        String(self.reversed())\n    }\n}\n\nprint(\"abc\".reverse()) // Outputs: cba\n</code></pre> <p>If a method needs to modify (or mutate) the instance itself, we need to mark the method as <code>mutating</code>. The example below adds a new mutating method called square to Swift\u2019s Int type, which squares the original value.</p> <pre><code>extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\n\nvar number = 5\nnumber.square()\nprint(number) // Outputs: 25\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-initializers","title":"Adding Initializers","text":"<p>Extensions can also provide additional initializers. For example, we can add an initializer that creates a <code>Date</code> instance from a timestamp.</p> <pre><code>extension Date {\n    init?(timestamp: Double) {\n        self.init(timeIntervalSince1970: timestamp)\n    }\n}\n\nlet timestamp = 1693982400.0 // Unix timestamp for 2023-09-06 06:40:00\nif let date = Date(timestamp: timestamp) {\n    print(date) // Outputs: 2023-09-06 06:40:00 +0000\n}\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-subscripts","title":"Adding Subscripts","text":"<p>Extensions can add new subscripts to an existing type. For example, we can add a subscript that returns the character at a given index in the string.</p> <pre><code>extension String {\n    subscript(index: Int) -&gt; Character {\n        self[self.index(startIndex, offsetBy: index)]\n    }\n}\n\nprint(\"Swift\"[1]) // Outputs: w\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-functionality-to-custom-types","title":"Adding functionality to custom types","text":""},{"location":"swift/continued-learning/extensions-in-swift/#adding-computed-properties_1","title":"Adding computed properties","text":"<p>We can also add computed properties to a type using extensions. For instance, for the <code>Person</code> class, we might add a computed property that determines if the person is an adult.</p> <pre><code>class Person {\n    var name: String\n    var age: Int\n\n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nextension Person {\n    var isAdult: Bool {\n        return age &gt;= 18\n    }\n}\n\nprint(person.isAdult) // Outputs: true\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#adding-methods_1","title":"Adding methods","text":"<p>Suppose we have a <code>Circle</code> class and want to add a method that calculates the area of the circle. We can do this using extensions.</p> <pre><code>class Circle {\n    var radius: Double\n\n    init(radius: Double) {\n        self.radius = radius\n    }\n}\n\nextension Circle {\n    func area() -&gt; Double {\n        return 3.14 * radius * radius\n    }\n}\n\nlet circle = Circle(radius: 5.0)\nprint(circle.area()) // Outputs: 78.5\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#constraints-for-extensions","title":"Constraints for extensions","text":"<p>Constraints on extensions in Swift allow us to extend a type only when it meets certain conditions. This is especially useful when we want to add functionality to a type that conforms to a specific protocol or has certain properties.</p> <p>In the example below, we will create an extension on Array that only works when the elements of the array conform to the Numeric protocol. We will add a method called sum() that calculates the sum of the elements in the array.</p> <pre><code>extension Array where Element: Numeric {\n    func sum() -&gt; Element {\n        reduce(0, +)\n    }\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.sum()) // Outputs: 15\n\nlet doubles = [1.5, 2.5, 3.5]\nprint(doubles.sum()) // Outputs: 7.5\n\n// This will not work because String is not Numeric\n// let strings = [\"a\", \"b\", \"c\"]\n// print(strings.sum())\n// Error: Cannot invoke 'sum' with an array of strings\n</code></pre>"},{"location":"swift/continued-learning/extensions-in-swift/#protocol-extensions","title":"Protocol extensions","text":"<p>In Swift, we can also extend protocols. It works pretty much like abstract classes when regarding a functionality we want to be available in all the classes that implements some protocol (without having to inherit from a base common class).</p> <pre><code>// Define a protocol\nprotocol Describable {\n    func describe() -&gt; String\n}\n\n// Provide a default implementation using a protocol extension\nextension Describable {\n    func describe() -&gt; String {\n        \"This is a generic description\"\n    }\n}\n\n// Define a struct that conforms Describable protocol\nstruct Person: Describable {\n    var name: String\n    var age: Int\n\n    // Overriding the default implementation\n    func describe() -&gt; String {\n        \"My name is \\(name) and I am \\(age) years old.\"\n    }\n}\n\nstruct Employee: Describable {\n    var name: String\n    var age: Int\n\n    // Using the default implementation\n}\n\n// By just implementing the protocol the describe() method is available\n\nlet person = Person(name: \"Ivan\", age: 21)\nlet employee = Employee(name: \"Saul\", age: 25)\n\nprint(person.describe()) // Outputs: My name is Ivan and I am 21 years old.\nprint(employee.describe()) // Outputs: This is a generic description\n</code></pre>"},{"location":"swiftui/","title":"SwiftUI","text":"<p>SwiftUI is a modern user interface framework for building native apps for iOS, macOS, watchOS, and tvOS.</p> <ul> <li> How to Add Custom Fonts in SwiftUI</li> </ul>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/","title":"How to Add Custom Fonts in SwiftUI","text":"<p>Integrating custom fonts into your SwiftUI app can significantly enhance its visual appeal and user experience. This guide will walk you through the steps to add custom fonts to your SwiftUI application.</p>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#setting-up-your-project","title":"Setting Up Your Project","text":"<p>To begin, you need the font files you wish to use. These files are typically in <code>.ttf</code> (TrueType Font) or <code>.otf</code> (OpenType Font) formats. You can find a variety of fonts on sites like Google Fonts, which offers an extensive collection of open-source fonts.</p> <p></p>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#adding-font-files-to-your-project","title":"Adding Font Files to Your Project","text":"<ol> <li>Choose and download the font you want to use. Ensure the font is in either <code>.ttf</code> or <code>.otf</code> format.</li> <li>Drag the downloaded font files into your Xcode project. It\u2019s good practice to create a new group (e.g., <code>Fonts</code>) to keep your files organized.</li> <li>When you drag the files into Xcode, ensure that \"Copy items if needed\" is checked and that the files are added to your app\u2019s target.</li> </ol>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#verifying-font-files-in-xcode","title":"Verifying Font Files in Xcode","text":"<p>To ensure your fonts are correctly added, follow these steps:</p> <ol> <li>Go to your project\u2019s settings.</li> <li>Navigate to the <code>Build Phases</code> tab.</li> <li>Under <code>Copy Bundle Resources</code>, confirm that your font files are listed.</li> </ol> <p></p>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#updating-the-infoplist-file","title":"Updating the <code>Info.plist</code> File","text":"<p>To make the fonts available to your app, you need to update the <code>Info.plist</code> file:</p> <ol> <li>Go to your project\u2019s settings.</li> <li>Navigate to the <code>Info</code> tab.</li> <li>Add a new key: <code>Fonts provided by application</code>.</li> <li>Add each font file, ensuring you include the correct file name and extension.</li> </ol> <p></p>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#using-custom-fonts-in-swiftui","title":"Using Custom Fonts in SwiftUI","text":"<p>With your fonts added and configured, you can now use them in your SwiftUI views. The basic way to display text in SwiftUI is with the <code>Text</code> view. To use a custom font, use the <code>.font</code> modifier with the <code>.custom</code> method.</p> <pre><code>import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Text(\"Hello, SwiftUI!\")\n                .font(.custom(\"MontserratRoman-Bold\", size: 48))\n                .foregroundStyle(.orange)\n\n            Text(\"Custom Fonts are Great!\")\n                .font(.custom(\"Montserrat-Thin\", size: 25))\n        }\n    }\n}\n\n#Preview {\n    ContentView()\n}\n</code></pre> <p>Replace <code>\"Montserrat\"</code>  with the exact names of your font files (excluding the file extension).</p>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#handling-font-failures","title":"Handling Font Failures","text":"<p>It's important to provide a fallback font in case your custom font fails to load. You can do this by using the <code>.font</code> modifier conditionally:</p> <pre><code>Text(\"Hello, SwiftUI!\")\n    .font(Font.custom(\"MyCustomFont-Regular\", size: 24) ?? .system(size: 24))\n</code></pre>"},{"location":"swiftui/continued-learning/how-to-add-custom-fonts-in-swiftui/#finding-the-correct-font-name","title":"Finding the Correct Font Name","text":"<p>Sometimes, determining the exact name of a font can be tricky. You can list all available fonts in your app to find the correct font name. Add the following code in your app\u2019s initialization:</p> <pre><code>init() {\n    for family in UIFont.familyNames {\n        print(family)\n        for names in UIFont.fontNames(forFamilyName: family) {\n            print(\"== \\(names)\")\n        }\n    }\n}\n</code></pre> <p>Running this code will print a list of all font families and their respective font names, helping you identify the correct name to use.</p> <p></p>"}]}